
import java_cup.runtime.*;
import java.util.*;

terminal CLASS;
terminal AND;
terminal ELSE;
terminal IF;
terminal WHILE;
terminal READ;
terminal PRINT;
terminal PRINTLN;
terminal RETURN;
terminal OR;
terminal TIMES;
terminal PLUS;
terminal PLUSPLUS;
terminal MINUS;
terminal MINUSMINUS;
terminal PREFIXPLUS;
terminal PREFIXMINUS;
terminal DIVIDE;
terminal SEMI;
terminal LEFT_PAREN;
terminal RT_PAREN;
terminal LEFT_BRACE;
terminal RT_BRACE;
terminal LEFT_BRKT;
terminal RT_BRKT;
terminal EQEQ;
terminal GTR;
terminal LESS;
terminal LESS_EQ;
terminal GTR_EQ;
terminal NOT_EQ;
terminal NOT;
terminal CONDITION;
terminal COLON;
terminal ASSMNT;
terminal COMMA;
terminal FINAL;
terminal VOID;
terminal TRUE;
terminal FALSE;

terminal String INT;
terminal String FLOAT;
terminal String BOOL;
terminal String CHAR;

terminal String ID;
terminal int INTLIT;
terminal double FLOATLIT;
terminal String CHARLIT;
terminal String STRINGLIT;

terminal String VAR;
terminal String STR; //remove

terminal QUESTION;

non terminal Program program;
non terminal MemberDecls memberDecls;
non terminal ArrayList<FieldDecl> fieldDecls;
non terminal ArrayList<MethodDecl> methodDecls;
non terminal FieldDecl fieldDecl;
non terminal MethodDecl methodDecl;
non terminal Expr optionalExpr;
non terminal Boolean optionalSemi;
non terminal Type type;
non terminal ArrayList<ArgDecl> argDeclList;
non terminal ArrayList<ArgDecl> argDecls;
non terminal ArgDecl argDecl;
non terminal ArrayList<Stmt> stmts;
non terminal Stmt stmt;
non terminal BinaryOp binaryOp;
non terminal Stmt ifEnd;
non terminal ArrayList<Expr> args;
non terminal ArrayList<Name> readList;
non terminal ArrayList<Expr> printList;
non terminal ArrayList<Expr> printLineList;
non terminal Name name;
non terminal Expr expr;


// PRECEDENCE //
terminal UPLUS, UMINUS;

// DANGLING
precedence left ELSE;

// ASSIGN
precedence left ASSMNT;

// TERNARY
precedence left QUESTION;

// EQUALITY
precedence left OR;
precedence left AND;

// RELATION
precedence left NOT_EQ, EQEQ;
precedence left GTR, GTR_EQ, LESS, LESS_EQ;

// MATH
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;

// UNARY
precedence left NOT, UPLUS, UMINUS;

start with program;

program ::=
        CLASS ID:id LEFT_BRACE memberDecls:ms RT_BRACE
		{: RESULT = new Program(id, ms); :}
        ;
memberDecls ::=
        fieldDecl:fd memberDecls:mds
		{: RESULT = new MemberDecls(fd, mds); :}
		| methodDecls:md
		{: RESULT = new MemberDecls(md); :}
		;
fieldDecls ::=
        fieldDecl:fd fieldDecls:fds
		{:
        fds.add(0,fd);
        RESULT = fds;
		:}
		|
		{: RESULT = new ArrayList<FieldDecl>(); :}
		;
methodDecls ::=
        methodDecl:md methodDecls:mds
        {:
            mds.add(0,md);
            RESULT = mds;
        :}
        |
        {: RESULT = new ArrayList<MethodDecl>(); :}
        ;
fieldDecl ::=
            FINAL type:t ID:id optionalExpr:optExpr SEMI
			{: RESULT = new FieldDecl(t, id, optExpr, true); :}
			|  type:t ID:id optionalExpr:optExpr SEMI
			{: RESULT = new FieldDecl(t, id, optExpr, false); :}
			|  type:t ID:id LEFT_BRKT INTLIT:len RT_BRKT SEMI
			{: RESULT = new FieldDecl(t, id, len); :}
			;

optionalExpr ::=
            ASSMNT expr:e
			{: RESULT = e; :}
			|
			{: RESULT = null; :}
			;
methodDecl ::=
        type:rt ID:id LEFT_PAREN argDecls:as RT_PAREN LEFT_BRACE fieldDecls:fs stmts:sts RT_BRACE optionalSemi:optSemi
        {: RESULT = new MethodDecl(rt, id, as, fs, sts, optSemi); :}
        | VOID ID:id LEFT_PAREN argDecls:as RT_PAREN LEFT_BRACE fieldDecls:fs stmts:sts RT_BRACE optionalSemi:optSemi
        {: RESULT = new MethodDecl(new Type("void"), id, as, fs, sts, optSemi); :}
        ;
optionalSemi ::=
            SEMI
            {: RESULT = true; :}
            |
            {: RESULT = false; :}
            ;
type ::=
            INT
			{: RESULT = new Type("int"); :}
			| FLOAT
			{: RESULT = new Type("float"); :}
			| BOOL
			{: RESULT = new Type("bool"); :}
			| CHAR
			{: RESULT = new Type("char"); :}
			;

argDecls ::=
            argDeclList:argDL
            {: RESULT = argDL; :}
            |
            {: RESULT = new ArrayList<ArgDecl>(); :}
            ;
argDeclList ::=
            argDecl:a COMMA argDeclList:argDeclList
            {:
                argDeclList.add(0,a);
                RESULT = argDeclList;
            :}
            |	argDecl:a
            {:
                ArrayList<ArgDecl> argDeclHold = new ArrayList<ArgDecl>();
                argDeclHold.add(a);
                RESULT = argDeclHold;
            :}
            ;
argDecl ::=
            type:t ID:id
            {: RESULT = new ArgDecl(t, id, false); :}
            |  type:t ID:id LEFT_BRKT RT_BRKT
            {: RESULT = new ArgDecl(t, id, true); :}
            ;
stmts ::=
        stmt:st stmts:stms
        {:
            stms.add(0,st);
            RESULT = stms;
        :}
        |
        {: RESULT = new ArrayList<Stmt>(); :}
        ;

stmt ::=

     IF LEFT_PAREN expr:e RT_PAREN stmt:st ifEnd:elseStmt
     {: RESULT = new Stmt(e, st, elseStmt); :}
     |	WHILE LEFT_PAREN expr:e RT_PAREN stmt:st
     {: RESULT = new Stmt(e, st); :}
     |	name:n ASSMNT expr:e SEMI
     {: RESULT = new Stmt(n, e); :}
     |	READ LEFT_PAREN readList:rl RT_PAREN SEMI
     {: RESULT = new Stmt(new FuncType("read"), rl); :}
     |  PRINT LEFT_PAREN printList:pl RT_PAREN SEMI
     {: RESULT = new Stmt(new FuncType("print"), pl); :}
     |	PRINTLN LEFT_PAREN printLineList:pll RT_PAREN SEMI
     {: RESULT = new Stmt(new FuncType("printline"), pll); :}
     |	ID:id LEFT_PAREN RT_PAREN SEMI
     {: RESULT = new Stmt(id); :}
     |	ID:id LEFT_PAREN args:args RT_PAREN SEMI
     {: RESULT = new Stmt(id, args, true); :}
     |  RETURN SEMI
     {: RESULT = new Stmt(); :}
     |  RETURN expr:e SEMI
     {: RESULT = new Stmt(e); :}
     |	name:n PLUSPLUS SEMI
     {: RESULT = new Stmt(n, "++"); :}
     |  name:n MINUSMINUS SEMI
     {: RESULT = new Stmt(n, "--"); :}
     |  LEFT_BRACE fieldDecls:fs stmts:sts RT_BRACE optionalSemi:optSemi
     {: RESULT = new Stmt(fs, sts, optSemi); :}
     ;

ifEnd ::=
        ELSE stmt:st
        {: RESULT = st; :}
        |
        {: RESULT = null; :}
        ;
name ::=
        ID:id
		{: RESULT = new Name(id); :}
        |  ID:id LEFT_BRKT expr:e RT_BRKT
		{: RESULT = new Name(id, e); :}
		;
args ::=
        expr:e COMMA args:args
        {:
            args.add(0,e);
            RESULT = args;
        :}
        |	expr:e
        {:
            ArrayList<Expr> argsTempList = new ArrayList<Expr>();
            argsTempList.add(e);
            RESULT = argsTempList;
        :}
        ;
readList ::=
	        name:n COMMA readList:rl
            {:
                rl.add(0,n);
                RESULT = rl;
            :}
            |	name:n
            {:
                ArrayList<Name> rlList = new ArrayList<Name>();
                rlList.add(n);
                RESULT = rlList;
            :}
            ;
printList ::=
            expr:e COMMA printList:pl
            {:
                pl.add(0,e);
                RESULT = pl;
            :}
            |	expr:e
            {:
                ArrayList<Expr> plList = new ArrayList<Expr>();
                plList.add(e);
                RESULT = plList;
            :}
            ;
printLineList ::=
            printList:pl
            {: RESULT = pl; :}
            |
            {: RESULT = new ArrayList<Expr>(); :}
            ;
expr ::=
     name:n
	 {: RESULT = new Expr(n); :}
     |
     ID:id LEFT_PAREN RT_PAREN
     {: RESULT = new Expr(new ExprId(id)); :}
     |
     ID:id LEFT_PAREN args:args RT_PAREN
     {: RESULT = new Expr(id, args); :}
     |
     INTLIT:intLit
     {: RESULT = new Expr(intLit); :}
     |
     CHARLIT:charLit
     {: RESULT = new Expr(charLit); :}
     |
     STRINGLIT:s
     {: RESULT = new Expr(s); :}
     |
     FLOATLIT:f
     {:
     Double d = new Double(f);
     RESULT = new Expr(d.floatValue());
     :}
     |
     TRUE
     {: RESULT = new Expr(true); :}
     |
     FALSE
     {: RESULT = new Expr(false); :}
     |
     LEFT_PAREN expr:e RT_PAREN
     {: RESULT = new Expr(e); :}
     |
     NOT expr:e
     {: RESULT = new Expr(e, "~"); :}
     |
     MINUS expr:e
     {: RESULT = new Expr(e, "-"); :} %prec UMINUS
     |
     PLUS expr:e
     {: RESULT = new Expr(e, "+"); :} %prec UPLUS
     |
     LEFT_PAREN type:t RT_PAREN expr:e
     {: RESULT = new Expr(t, e); :}
     |
     binaryOp:binOp
     {: RESULT = new Expr(binOp); :}
     |
     LEFT_PAREN expr:e1 CONDITION expr:e2 COLON expr:e3 RT_PAREN
     {: RESULT = new Expr(new ExprTernary(e1, e2, e3)); :}
     ;

binaryOp ::=
         expr:lhs PLUS  expr:rhs
         {:
         BinaryOp b = new BinaryOp(lhs, rhs);
         b.setSym("+");
         RESULT = b;
         :}
         |
         expr:lhs MINUS  expr:rhs
         {: RESULT = new BinaryOp(lhs, "-", rhs); :}
         |
         expr:lhs TIMES  expr:rhs
         {: RESULT = new BinaryOp(lhs, "*", rhs); :}
         |
         expr:lhs DIVIDE  expr:rhs
         {: RESULT = new BinaryOp(lhs, "/", rhs); :}
         |
         expr:lhs GTR  expr:rhs
         {: RESULT = new BinaryOp(lhs, ">", rhs); :}
         |
         expr:lhs LESS  expr:rhs
         {: RESULT = new BinaryOp(lhs, "<", rhs); :}
         |
         expr:lhs GTR_EQ  expr:rhs
         {: RESULT = new BinaryOp(lhs, ">=", rhs); :}
         |
         expr:lhs LESS_EQ  expr:rhs
         {: RESULT = new BinaryOp(lhs, "<=", rhs); :}
         |
         expr:lhs EQEQ  expr:rhs
         {: RESULT = new BinaryOp(lhs, "==", rhs); :}
         |
         expr:lhs NOT_EQ  expr:rhs
         {: RESULT = new BinaryOp(lhs, "<>", rhs); :}
         |
         expr:lhs OR  expr:rhs
         {: RESULT = new BinaryOp(lhs, "||", rhs); :}
         |
         expr:lhs AND  expr:rhs
         {: RESULT = new BinaryOp(lhs, "&&", rhs); :}
         ;





